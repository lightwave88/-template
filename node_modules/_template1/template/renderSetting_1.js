const GModules = require('../Gmodules.js');

// 處理繁雜的 renderSetting
class RenderSetting {

    static get(options) {
        if (options instanceof RenderSetting) {
            throw new TypeError("options typeError");
        }
        options = options || {};

        let res = new RenderSetting(options);


        res = new Proxy(res, {
            get: function (t, k) {
                let res;

                if (typeof t[k] != "undefined") {

                    if(typeof t[k] == "function"){
                        res = t[k].bind(t);
                    }else{
                        res = t[k];
                    }

                    return res;
                }

                if (k in t.options) {
                    res = t.options[k];
                }
                return res;
            },
            set: function (t, k, v) {

                if (k in t.options) {
                    t.setOptions(k, v);
                    return true;
                }
                return false;
            }
        });

        return res;
    }

    constructor(options) {
        this.options = {
            //模板內運作方式
            async: false,
            // 模板內的全域者
            bind: {},
            // 模板要用的模組名稱
            group: null,

            // 要注入的全域變數
            variable: {},
            // 模板中會用到路徑資訊
            path: {},
            // 資料
            data: {},
        };

        this.setOptions(options);
    }
    //--------------------------------------

    getOptions(key) {
        const res = this.options;

        if (key != null) {
            return res[key]
        }

        return res;
    }

    getIncludepath() {
        return this.options.path['root'];
    }
    //--------------------------------------
    setOptions(k, v) {
        let options = {};

        if (typeof k == "string") {
            options[k] = v;
        } else {
            Object.assign(options, k);
        }

        for (let k in options) {

            if (/options/.test(k)) {
                continue;
            }

            let set = options[k];

            let funName = k.replace(/^(.)(.*)$/, (m, g1, g2) => {
                return ("set" + g1.toUpperCase() + g2);
            });

            if (typeof this[funName] == 'function') {
                this[funName](set);
            }
        }
    }
    //--------------------------------------
    // 設定模板內的路徑資訊
    setPath(k, v) {
        const $path = this.options.path;

        if (typeof k == 'string') {
            $path[k] = v;
        } else {
            Object.assign($path, k);
        }
    }

    // 設定 include.rootPath
    setIncludepath(includePath) {
        this.options.path["root"] = includePath;
    }

    // 解析方法採用何種方式
    setAsync(async) {
        this.options.async = !!async;
    }

    // 綁定模板內的對象
    setBind(obj) {
        this.options.bind = obj;
    }

    // 設定 injectMode 的分組
    setGroup(group) {
        this.options.group = group;
    }

    // 設定模板內的全域變數
    setVariable(k, v) {
        const $variable = this.options.variable;

        if (typeof k == 'string') {
            $variable[k] = v;
        } else {
            Object.assign($variable, k);
        }
    }

    setData(k, v) {
        debugger;
        const $data = this.options.data;

        if (typeof k == 'string') {
            $data[k] = v;
        } else {
            Object.assign($data, k);
        }
    }
}

module.exports = RenderSetting;
GModules['renderSetting'] = RenderSetting;