const Gmodules = require('../Gmodules.js');

////////////////////////////////////////////////////////////////////////////////
//
// 讓使用者可以擴增功能
//
//
////////////////////////////////////////////////////////////////////////////////
// 若出現雙向引用的解決方法

const FunctionModule = {};

module.exports = FunctionModule;
Gmodules['functionModule'] = FunctionModule;

(function () {
    const $f = FunctionModule;

    // 分組
    $f.$addOnModuleGroups = {
        "*": {}
    };
    //----------------------------

    $f.addModule = function (name, fun, moduleName) {
        if (typeof name != 'string') {
            throw new TypeError("args[0] type must be string");
        }
        if (typeof fun != 'function') {
            throw new TypeError("args[0] type must be function");
        }

        moduleName = (moduleName == null ? "*" : moduleName);

        if (this.$addOnModuleGroups[moduleName] == null) {
            this.$addOnModuleGroups[moduleName] = {};
        }

        this.$addOnModuleGroups[moduleName][name] = fun;
    };
    //----------------------------
    // engine: 傳遞 options
    $f.getModule = function (root, moduleName, module, name) {
        // debugger;

        moduleName = moduleName || "*";

        const f = new FuntionCore(root);

        // 避免 override
        const f_proto = Object.getPrototypeOf(f);
        const f_keyList = Object.getOwnPropertyNames(f_proto);

        if (!(moduleName in this.$addOnModuleGroups)) {
            throw new Error(`no this moduleGroup(${moduleName}) in FunctionModule`);
        }

        const addOn = this.$addOnModuleGroups[moduleName];

        for (let k in addOn) {
            if (f_keyList.includes(k)) {
                // 避免 override
                throw new Error(`cant override functionModule[${key}]`);
            }
            let fn = addOn[k];

            f[k] = (function () {
                let args = Array.from(arguments);
                args.unshift(module);

                fn.apply(this, args);
            }).bind(f);
        }

        module[name] = f;
    };

})();

///////////////////////////////////////////////////////////////////////////////

// 功能本體
class FuntionCore {
    constructor(root) {
        // debugger;

        Object.defineProperty(this, '$$$root', {
            value: root,
            configurable: false,
            writable: false,
            enumerable: false,
        });
    }
    //----------------------------
    stringify(obj) {
        let res;
        try {
            res = JSON.stringify(obj);
        } catch (err) {
            res = '' + err
        }
        return res;
    }
}
