const GModules = require("../Gmodules.js");

// 系統資訊
class SystemInfo {

    static getInfo() {
        // debugger;

        if (SystemInfo.instance == null) {
            SystemInfo.instance = new SystemInfo();
        }
        let info = SystemInfo.instance.getInfo();

        return info;
    }
    //---------------------------------
    constructor() {
        // debugger;

        this.info = {
            // 確定系統環境
            system: null,

            // include path
            // node.js 是以專案根目錄為主
            // browser 以當前網站網址
            includeRootPath: null,
            fileSystem: null,
            pathSystem: null,
        };

        this._checkSystem();

        this._getIncludePath();

        this._getFileSystem();

        this._getPathSystem();
    }
    //---------------------------------
    getInfo() {
        return this.info;
    }
    //---------------------------------
    // 確定系統
    _checkSystem() {
        // debugger;
        if (typeof (window) != "undefined" && typeof (document) != null) {
            this.info.system = 'browser';
        } else if (typeof (module) != "undefined" && typeof (module.exports) != "undefined") {
            this.info.system = 'nodejs';
        } else {
            throw new Error('unknow system');
        }
    }
    //---------------------------------
    _getIncludePath() {
        // debugger;
        const sysInfo = this.info;

        if (/nodejs/.test(sysInfo.system)) {
            // node.js 是以專案根目錄為主
            sysInfo.includeRootPath = process.cwd();
        } else {
            let path = location.href;
            path = path.replace(/[?][\s\S]*$|#[\s\S]*$/, "");
            sysInfo.includeRootPath = path;
        }

    }
    //---------------------------------
    _getFileSystem() {
        // debugger;

        const sysInfo = this.info;

        let fileSys;

        if (/nodejs/.test(sysInfo.system)) {
            fileSys = new NodeJsFileSystem(this.info);
        } else {
            fileSys = new BrowserFileSystem(this.info);
        }
        this.info.fileSystem = fileSys;
    }
    //---------------------------------
    _getPathSystem() {
        // debugger;

        const sysInfo = this.info;

        let pathSys;

        if (/nodejs/.test(sysInfo.system)) {
            pathSys = new NodeJsPath(this.info);
        } else {
            pathSys = new BrowserPath(this.info);
        }

        this.info.pathSystem = pathSys;
    }
}

SystemInfo.instance;

module.exports = SystemInfo;
GModules["SystemInfo"];

///////////////////////////////////////////////////////////////////////////////
// include()，所需
class FileSystem {
    constructor(info) {
        this.info = info;
    }

    readFile(path) {
        throw new Error("need override");
    }

    readFileSync(path) {
        throw new Error("need override");
    }
}
//----------------------------
class NodeJsFileSystem extends FileSystem {

    constructor(info) {
        super(info);
        this.$fs = require("fs");
    }

    readFile(path) {
        return new Promise((res, rej) => {
            this.$fs.readFile(path, 'utf8', function (er, data) {
                if (er != null) {
                    rej(er);
                } else {
                    res(data);
                }
            });
        });
    }

    readFileSync(path) {
        const fs = require("fs");
        let res = fs.readFileSync(path, 'utf8');

        return res;
    }
}
//----------------------------
class BrowserFileSystem extends FileSystem {

    readFile(path) {
        return this._ajax({
            url: path,
            async: true,
        });
    }

    readFileSync(path) {
        return this._ajax({
            url: path,
            async: false,
        });
    }

    /*
    data={
        data:{},
        dataType:"xml/'',
        type:"get/post",
        url:"",
        async:"true/false"
    }
    data:{username:123,password:456}
    */

    _ajax(data) {
        // debugger;

        let res;

        //第一
        let ajax = null;
        if (window.XMLHttpRequest) {
            ajax = new XMLHttpRequest();
        } else {
            ajax = new ActiveXObject();
        }
        //-----------------------
        //第二
        let type = data.type == 'get' ? 'get' : 'post';
        let async = data.async == false ? false : true;
        data.data = Object.assign({}, data.data);

        let url = data.url;
        let currentTime = (new Date()).getTime();
        let argList = [];

        if (Object.keys(data.data).length > 0) {
            for (let k in data.data) {
                argList.push(`${k}=${data.data[k]}`);
            }
        }
        //-----------------------
        //第三
        if (type == 'get') {

            argList.push(`_time=${currentTime}`);
            let argText = argList.join("&");

            url += "?" + argText;

            ajax.open(data.type, url, async);
            ajax.send(null);

        } else {
            let argText = null;

            if (argList.length > 0) {
                argText = argList.join("&");
            }

            ajax.open(data.type, url, async);
            ajax.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            ajax.send(argText);
        }
        //-----------------------
        //第四
        if (async) {

            return new Promise(function (resolve, reject) {
                ajax.onreadystatechange = function () {
                    if (this.readyState == 4) {
                        if (this.status == 200) {
                            // debugger;

                            if (/^xml$/.test(data.dataType)) {
                                res = ajax.responseXML;
                            } else {
                                res = ajax.responseText;
                            }

                            resolve(res);
                        } else {
                            reject();
                        }
                    }
                }
            });
        } else {
            if (/^xml$/.test(data.dataType)) {
                res = ajax.responseXML;
            } else {
                res = ajax.responseText;
            }
            return res;
        }
    }

}
///////////////////////////////////////////////////////////////////////////////
// 對瀏覽器，實作 Path
class Path {
    constructor(info) {
        this.info = info;
    }

    join() {
        throw new Error('need override join()');
    }
}

class NodeJsPath extends Path {
    constructor(info) {
        super(info);
        this.$path = require("path");
    }

    join() {
        let path = this.$path.join.apply(this.$path, arguments);
        return path;
    }
}


class BrowserPath extends Path {
    join() {
        if (arguments.length === 0) {

            return '.';
        }

        var joined;
        var firstPart;
        for (var i = 0; i < arguments.length; ++i) {
            var arg = arguments[i];
            validateString(arg, 'path');
            if (arg.length > 0) {
                if (joined === undefined)
                    joined = firstPart = arg;
                else
                    joined += '\\' + arg;
            }
        }

        if (joined === undefined)
            return '.';

        // Make sure that the joined path doesn't start with two slashes, because
        // normalize() will mistake it for an UNC path then.
        //
        // This step is skipped when it is very clear that the user actually
        // intended to point at an UNC path. This is assumed when the first
        // non-empty string arguments starts with exactly two slashes followed by
        // at least one more non-slash character.
        //
        // Note that for normalize() to treat a path as an UNC path it needs to
        // have at least 2 components, so we don't filter for that here.
        // This means that the user can use join to construct UNC paths from
        // a server name and a share name; for example:
        //   path.join('//server', 'share') -> '\\\\server\\share\\')
        var needsReplace = true;
        var slashCount = 0;
        if (isPathSeparator(firstPart.charCodeAt(0))) {
            ++slashCount;
            const firstLen = firstPart.length;
            if (firstLen > 1) {
                if (isPathSeparator(firstPart.charCodeAt(1))) {
                    ++slashCount;
                    if (firstLen > 2) {
                        if (isPathSeparator(firstPart.charCodeAt(2)))
                            ++slashCount;
                        else {
                            // We matched a UNC path in the first part
                            needsReplace = false;
                        }
                    }
                }
            }
        }
        if (needsReplace) {
            // Find any more consecutive slashes we need to replace
            for (; slashCount < joined.length; ++slashCount) {
                if (!isPathSeparator(joined.charCodeAt(slashCount)))
                    break;
            }

            // Replace the slashes if needed
            if (slashCount >= 2)
                joined = '\\' + joined.slice(slashCount);
        }
    }
}
