const GModules = require('../Gmodules.js');
const $SystemInfo = require('./systemInfo_1.js');

////////////////////////////////////////////////////////////////////////////////
//
// 節點
//
////////////////////////////////////////////////////////////////////////////////

const NodeClass = {};

module.exports = NodeClass;
GModules['nodeClass'] = NodeClass
//--------------------------------------
// 抽象類
// 除了 (command 標籤) (script 標籤)外都是
class Node {

    constructor(root) {
        this.root = root;
    }

    printCommand() {
        throw new Error('need override printCommand');
    }
    //----------------------------
    // 脫逸 `
    _checkHtml(content) {
        let reg = /(.)?`/g;

        content = content.replace(reg, function (m, g1) {
            debugger;

            let res;

            if (g1 == "\\") {
                res = m;
            } else {
                g1 = (g1 == null ? "" : g1);
                res = g1 + "\\`";
            }
            return res;
        });

        return content;
    }
    //----------------------------
    toString() {
        return String(this);
    }
}
//==============================================================================
class NormalNode extends Node {
    constructor(root, content) {
        super(root);
        this.html = content;
    }
    //----------------------------
    printCommand() {
        this.html = this._checkHtml(this.html);
        let content = `Out.print(\`${this.html}\`);\n`;
        return content;
    }
    //----------------------------
    toString() {
        return `NormalNode(this.html)`;
    }
}

NodeClass['NormalNode'] = NormalNode;
//==============================================================================

// 部分的 script 內容
class ScriptPartNode extends Node {

    // isContext:是否是內文
    constructor(root, content, isTag) {
        debugger;

        super(root);
        this.html = content;

        if (typeof isTag != 'boolean') {
            throw new TypeError("ScriptPartNode.constructor() args[1] typeError");
        }

        this.isTag = isTag;
    }
    //----------------------------
    printCommand() {
        let content;

        if (this.isTag) {
            // 會再經過 String.template 轉換
            this.html = this._checkHtml(this.html);
            content = `Out.print(\`${this.html}\`);\n`;
        } else {
            // 不能經過 String.template 轉換
            let html = JSON.stringify(this.html);
            content = `Out.print(${html});\n`;
        }

        return content;
    }
    //----------------------------
    toString() {
        return `ScriptPartNode(${this.isTag})(this.html)`;
    }
}

NodeClass['ScriptPartNode'] = ScriptPartNode;
//==============================================================================
// 命令標籤

const CommandNode = (function () {

    const Reg_1 = /(?:\b|;)include\([^)]*\)(?:\s|;)/;
    const Reg_2 = /include\(/;
    const Reg_3 = [
        /(?:[`][\s\S]*?[^\\][`])/,
        /(?:['][\s\S]*?[^\\]['])/,
        /(?:["][\s\S]*?[^\\]["])/,
        /(?:\/\/[\s\S]*?(?:\r\n|\n|\r))/,
        /(?:\/\*[\s\S]*?\*\/)/,
        /(?:\b|;)include\(([^)]*)\)(?:\s|;)/,
    ];


    class CommandNode extends Node {

        // include: {}: include() 的位置上
        constructor(root, tagName, textContent, includeList) {
            super(root);

            // this.head = head.trim();

            this.textContent = textContent || '';

            this.tagName = tagName;

            // 是否檢查過 include
            this.$hasInclude;

            // 文本 include 分離點
            // [{s:,e:,path:}]
            this.includeList;

            this._init(includeList);
        }
        //----------------------------
        _init(includeList) {

            if (includeList) {
                this.includeList = includeList;
            }
        }
        //----------------------------
        // 分離出 include.node
        separateInclude() {
            debugger;

            if (!Array.isArray(this.includeList) || this.includeList.length < 1) {
                return this;
            }

            let $nodeList = this._separateIncludeNode();

            return $nodeList;
        }
        //----------------------------
        printCommand() {
            let fnCommand = '';
            let textContent;

            switch (this.tagName) {
                case 'script':
                case '<%':
                case '(%':
                    fnCommand = this.textContent;
                    break;
                case '<%=':
                case '(%=':
                    textContent = this.textContent.trim();

                    if (textContent) {
                        fnCommand = `Out.print(${textContent});\n`;
                    }

                    break;
                case '<%-':
                case '(%-':
                    textContent = this.textContent.trim();

                    if (textContent) {
                        fnCommand = `Out.escape(${this.textContent});\n`;
                    }

                    break;
                default:
                    throw new Error(`commandName Error(${this.tagName})`);
                    break;
            }
            return fnCommand;
        }
        //----------------------------
        // 是否有 include
        hasInclude() {
            debugger;

            if (this.$hasInclude != null) {
                return this.$hasInclude;
            } else {
                // 尚未檢查過 include
                this._checkInclude();
            }

            if (Array.isArray(this.includeList) && this.includeList.length > 0) {
                this.$hasInclude = true;
            } else {
                this.$hasInclude = false;
            }

            return this.$hasInclude;
        }
        //----------------------------
        toString() {
            return `CommandNode(this.textContent)`;
        }
        //----------------------------
        _separateIncludeNode() {
            debugger;
            const nodeList = [];

            let start = 0;

            let node;
            this.includeList.forEach((info, i) => {
                debugger;

                let s = info.s;
                let e = info.e;
                let path = info.path;

                let s_context = this.textContent.slice(start, s);

                if (s_context) {
                    node = new CommandNode(this.root, this.tagName, s_context, true);
                    nodeList.push(node);
                }

                node = new IncludeNode(this.root, path);
                nodeList.push(node);

                start = e + 1;
            });

            let s_context = this.textContent.slice(start);
            if (s_context) {
                // CommandNode 裡面不會有 include
                node = new CommandNode(this.root, this.tagName, s_context, true);
                nodeList.push(node);
            }

            return nodeList;
        }
        //----------------------------
        // 檢查是否有 include
        _checkInclude() {


            this.includeList = true;

            switch (this.tagName) {
                case '<%=':
                case '(%=':
                case '<%-':
                case '(%-':
                    return;
            }
            if (!Reg_1.test(this.textContent)) {
                return;
            }
            //-----------------------
            debugger;

            this.includeList = [];

            const reg = CommandNode.getChecIncludekReg();

            let content = this.textContent.slice(0);

            let hasChecked = 0;
            let rgRes;

            while ((rgRes = reg.exec(content)) != null) {
                debugger;

                let match = RegExp.lastMatch;
                let rightContext = RegExp.rightContext;
                let leftContext = RegExp.leftContext;

                hasChecked += (leftContext ? leftContext.length : 0);

                if (rgRes[1] != null) {

                    let path = rgRes[1];

                    let j = match.search(Reg_2);

                    let start = hasChecked + j;

                    let m = match.replace(/\s+$/, "");

                    let end = (hasChecked + m.length - 1);

                    this.includeList.push({
                        s: start,
                        e: end,
                        path: path,
                    });
                }

                hasChecked += match.length;
                content = rightContext;
            }
        }
        //----------------------------
        static getChecIncludekReg() {
            let list = [];
            let reg;

            // 捕捉 ``
            list.push(Reg_3[0]);

            // 捕捉 ''
            list.push(Reg_3[1]);

            // 捕捉 ""
            list.push(Reg_3[2]);

            // 捕捉 // \n
            list.push(Reg_3[3]);

            // 捕捉 /* */
            list.push(Reg_3[4]);

            // 捕捉 include()
            list.push(Reg_3[5]);

            let list_1 = [];

            list.forEach(function (v, i) {
                list_1.push(v.source);
            });

            let str = list_1.join('|');

            list = undefined;
            list_1 = undefined;

            reg = RegExp(str);

            return reg;
        }
    }


    return CommandNode;
})();

NodeClass['CommandNode'] = CommandNode;
//==============================================================================
const IncludeNode = (function () {
    const Reg_1 = /\(([^)]*)\)/;

    class IncludeNode extends Node {
        constructor(root, text) {
            super(root);

            this.filepPath = text;

            // 主要目標
            this.includePath;

            // 把 render 的 module.Path 引入
            // 確保同步
            this.module;

            this.systemInfo;

            // this.reg_1 = /^(?:([/\\])|[.][/\\]|[.][.][/\\])[\s\S]*$/;

            this._init();
        }
        //----------------------------
        _init() {
            this.systemInfo = $SystemInfo.getInfo();

            this.module = this.root.getModules();
        }
        //----------------------------
        _resolvePath() {
            debugger;

            if (this.module == null) {
                throw new Error('includeNode no set module');
            }

            // 預設會有 Path["root"]
            const Path = this.module.path;

            const pathSys = this.systemInfo.pathSystem;

            let fn = new Function('Path', '$path', `
                'use strict';

                debugger;
                let res = $path.join(${this.filepPath});
                return res;
            `);

            this.includePath = fn(Path, pathSys);

            console.log('includePath: %s', this.includePath);
        }
        //----------------------------
        printCommand() {
            throw new Error("include no resolve");
        }
        //----------------------------
        // 截取文件
        // 再轉成 nodeList
        // 非同步
        async include() {
            debugger;

            this._resolvePath();

            debugger;

            const fileSys = this.systemInfo.fileSystem;
            const TagTools = GModules['tagTools'];

            // 非同步取得 context
            let context = await fileSys.readFile(this.includePath);

            debugger;

            let nodeList = TagTools._getCommandTag(this.root, context);

            debugger;

            return nodeList;
        }
        //----------------------------
        // 截取文件
        // 再轉成 nodeList
        // 同步
        includeSync() {
            debugger;

            this._resolvePath();

            debugger;

            const fileSys = this.systemInfo.fileSystem;
            const TagTools = GModules['tagTools'];

            // 同步取得 context
            let context = fileSys.readFileSync(this.includePath);

            debugger;

            let nodeList = TagTools._getCommandTag(this.root, context);

            debugger;

            return nodeList;
        }
        //----------------------------
        printCommand() {
            throw new Error("IncludeNode cant be printCommand");
        }
        //----------------------------
        toString() {
            return `I(${this.url})`;
        }
    }

    return IncludeNode;
})();



NodeClass['IncludeNode'] = IncludeNode;
