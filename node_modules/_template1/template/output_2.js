const Gmodules = require('../Gmodules.js');

const $RenderSetting = require('./renderSetting_1.js');
// const $SystemInfo = require('./systemInfo_1.js');

////////////////////////////////////////////////////////////////////////////////
//
// 輸出的核心
// 可被擴增
// 但很少會用到
//
//
////////////////////////////////////////////////////////////////////////////////

const escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
};

const OutputModule = {};

module.exports = OutputModule;
Gmodules["OutputModule"] = OutputModule;

(function () {

    const $o = OutputModule;

    // 分組
    $o.$addOnModuleGroups = {
        "*": {}
    };
    //-----------------------
    $o.addModule = function (name, fun, moduleName) {
        if (typeof name != 'string') {
            throw new TypeError("args[0] type must be string");
        }
        if (typeof fun != 'function') {
            throw new TypeError("args[0] type must be function");
        }

        moduleName = (moduleName == null ? "*" : moduleName);

        if (this.$addOnModuleGroups[moduleName] == null) {
            this.$addOnModuleGroups[moduleName] = {};
        }

        this.$addOnModuleGroups[moduleName][name] = fun;
    };
    //-----------------------------

    // engine: analyzeEngine(轉移資料用)
    // moduleName: 可以沒有
    $o.getModule = function (root, moduleName, module, name) {

        // 每次都需要全新的 output
        const out = new OutputCore(root);

        // 避免 override
        const out_proto = Object.getPrototypeOf(out);
        const keyList = Object.getOwnPropertyNames(out_proto);

        moduleName = moduleName || "*";

        if (!(moduleName in this.$addOnModuleGroups)) {
            throw new Error(`no this moduleGroup(${moduleName}) in OutputModule`);
        }

        const addOn = this.$addOnModuleGroups[moduleName];

        for (let k in addOn) {
            if (keyList.includes(k)) {
                // 避免 override
                throw new Error(`cant override OutputModule[${k}]`);
            }
            let fn = addOn[k];

            out[key] = (function () {
                debugger;

                let args = Array.from(arguments);

                // 引入模組給使用者運用
                args.unshift(module);

                let res = fn.apply(this, args);

                if (typeof res == 'string') {
                    this.push(res);
                } else if (res instanceof Promise) {

                    res.then((d) => {
                        this.push(d);
                    });

                    return res;
                } else if (res == null) {

                } else {
                    throw new Error(`no support this return type(${typeof (res)})`);
                }

            }).bind(out);
        }

        module[name] = out;
    };

})();

///////////////////////////////////////////////////////////////////////////////

// output 功能的核心

class OutputCore {
    constructor(root) {

        Object.defineProperty(this, '$$$root', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: root
        });

        // this['$$$contentList']
        // 要輸出的文本內容
        Object.defineProperty(this, '$$$contentList', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: []
        });
    }
    //----------------------------
    isAsync() {
        return this.$$$root.async;
    }
    //----------------------------
    push(html) {
        if (typeof (html) != 'string') {
            throw new TypeError(`output must be string`);
        }
        this.$$$contentList.push(html);
    }
    //----------------------------
    // 取得最後結果
    result() {
        return this.$$$contentList.join('');
    }
    //----------------------------
    print(html) {
        html = OutputCore.print(html);
        this.push(html);
    }
    //----------------------------
    escape(html) {

        html = OutputCore.print(html);

        if (typeof (_) == 'object' && _.escape != null) {
            html = _.escape(html);
        } else {

            let reg = RegExp(/(?:\^|<|>|"|'|`)/, 'g');
            html = html.replace(reg, function (m) {
                return escapeMap[m];
            });
        }
        this.push(html);
    }

    //---------------------------------
    // 取得對 include 更詳盡的設定
    getOptions(options) {
        let res = this['$$$root']['options'];
        Object.assign(res, options);
        return res;
    }


    // 動態 include
    // 可以是 sync, async
    // setting:, 傳遞更詳盡的設定
    include(filepath, options) {
        debugger;

        const module = this.$$$root.getModule();
        const fileSys = module.fileSys;

        if (this.isAsync()) {

            // 讀取檔案
            let p = fileSys.readFile(filepath);


            p = p.then((context) => {
                debugger;
                return OutputCore.includeTemplate.call(this, context, options);
            });

            return p;
        } else {

            // 讀取檔案
            let context = fileSys.readFileSync(filepath);

            // 讀取 file 內容
            OutputCore.includeTemplate.call(this, context, options);
        }
    }
    //---------------------------------
    // 測試功能
    // 必須和 eval 同時用
    require() {

    }

    // 取得 require 的結果
    // 將其 eval() 以取得上下文的變數
    getRequire() {

    }
    //---------------------------------
    // 解析文本
    static includeTemplate(context, options) {
        debugger;

        if (!(this instanceof OutputCore)) {
            throw new Error('must call by OutputCore instaance');
        }

        if (!(options instanceof $RenderSetting)) {
            options = $RenderSetting.get(options);
        }

        const p_options = $$$root.options;

        // 必須強制繼承的選項
        options.setAsync(p_options.async);
        options.setGroup(p_options.group);
        options.setIncludepath(p_options.getIncludepath());

        let fn = RenderFactory.getRenderFunction(context, options);

        let res = fn();

        if (res instanceof Promise) {

            res.then((d) => {
                this.push(res);
            });

            return res;

        } else {
            this.push(res);
        }
    }
    //---------------------------------
    static print(html) {

        if (typeof html == 'undefined') {
            html = 'undefined';
        } else if (typeof html == 'object') {
            if (html === null) {
                html = 'null';
            } else {
                html = JSON.stringify(html);
            }
        } else {
            try {
                html += '';
            } catch (err) {
                html = err.toString();
            }
        }
        return html;
    }

}
