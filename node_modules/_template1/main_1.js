// debugger;

const GModules = require('./Gmodules.js');

const SystemInfo = require('./template/systemInfo_1.js');

const TagTools = require('./template/tagTools_3.js');

// 把文本解析成藥的樣板
const RenderFactory = require('./template/renderFactory_2.js');

// 應用涵式模組
const FunctionModule = require('./template/functions_2.js');

// output 模組
const OutputModule = require('./template/output_2.js');

const Filter = require('./template/filter_2.js');

// 轉換模組
// const Transform = require('./template/transform_1.js');

//=============================================================================

// 取得 render function
// renderFunction.setModuleName()
// renderFunction.setPath()
// renderFunction.setOptions()
// renderFunction.setData()
const $template1 = function (content, options) {
    debugger;

    let fn = RenderFactory.getRenderFunction(content, options);
    return fn;
};

module.exports = $template1;
GModules['template'] = $template1;

//--------------------------------------------------------------------------
// $template 類別函式

(function () {
    // debugger;

    const systemInfo = SystemInfo.getInfo();

    const $t = $template1;

    // $t.module
    const $m = {
        file: systemInfo.fileSystem,
        path: systemInfo.pathSystem,
    };

    Object.defineProperty($t, "module", {
        value: $m,
        writable: false,
        configurable: false,
    });

    //-----------------------
    // 命令轉換模組
    // $template1.transform = Transform;

    // 測試用
    $t.test = {};

    $t.setIncludeRootPath = function () {

    };

    $t.getIncludeRootPath = function () {

    };

    $t.addOutput = function(){

    };

    $t.addFuntion = function(){

    };

    $t.addFilter = function(){

    };
})();


(function () {

    return;

    // test
    const $test = $template1.test || {};

    // 把內文解析為節點
    $template1.getHTMLNodeList = function (content, options) {
        let nodeList = TagTools.findCommandTag(content, options);
        return nodeList;
    };

    // test
    // 取得內文解析後的模版函式內容
    $template1.getFncontext = function (content, options) {
        let nodeList = TagTools.findCommandTag(content, options);
        let fnCommand = '';

        // 困難地方
        nodeList.forEach(function (node) {
            // this.fnCommand += node.printCommand(this.SCRIPTS);
            fnCommand += node.printCommand();
        });
        return fnCommand;
    };
})();

//==========================================================================
